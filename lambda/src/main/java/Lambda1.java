import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Lambda1 {

    public static void main(String[] args) {
        test001();
        test003();
    }

    public static void test001() {
        // 1.替代匿名内部类 用()->就可以代替整个匿名内部类
        new Thread(() -> System.out.println("It's a lambda function!")).start();
    }

    public static void test002() {
        // 2.使用lambda表达式对集合进行迭代
        // 使用forEach, 可以迭代集合中所有的对象
        List<String> languages = Arrays.asList("java", "scala", "python");

        languages.forEach(x -> System.out.println(x));
        languages.forEach(System.out::println);

    }

    public static void test003() {
        // 3.用lambda表达式实现map
        // map函数可以说是函数式编程里最重要的一个方法了。map的作用是将一个对象变换为另外一个。在我们的例子中，就是通过map方法将cost增加了0,05倍的大小然后输出。

        List<Double> cost = Arrays.asList(10.0, 20.0,30.0);
        cost.stream().map(x -> x + x*0.05).forEach(x -> System.out.println(x));
        cost.forEach(System.out::println);

        // 4.用lambda表达式实现map与reduce
        double allCost = cost.stream().map(x -> x+x*0.05).reduce((sum,x) -> sum + x).get();
        System.out.println(allCost);

        double allCost2 = cost.stream().reduce((sum,x) -> sum + x).get();
        System.out.println(allCost2);

    }

    // filter也是我们经常使用的一个操作。在操作集合的时候，经常需要从原始的集合中过滤掉一部分元素。
    public static void test005() {
        List<Double> cost = Arrays.asList(10.0, 20.0,30.0,40.0);
        List<Double> filteredCost = cost.stream().filter(x -> x > 25.0).collect(Collectors.toList());
        filteredCost.forEach(x -> System.out.println(x));
    }


}
